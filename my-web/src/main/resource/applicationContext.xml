<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"

       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      http://www.springframework.org/schema/task
      http://www.springframework.org/schema/task/spring-task-3.2.xsd">


    <!-- 自动扫描的包名，如果有多个包，请使用逗号隔开 -->
    <!--<context:component-scan base-package="com.*"/>-->

    <!-- 默认的注解映射的支持 -->
    <mvc:annotation-driven/>
    <!-- 启动对aspectj的支持 -->
    <!--<aop:aspectj-autoproxy/>-->
    <!-- expose-proxy 暴露代理 -->
    <!--<aop:aspectj-autoproxy expose-proxy="true"/>  -->


    <!-- 自动搜索指定包及其子包下的所有Bean类 -->
    <context:component-scan base-package="com.learn"/>

    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"></aop:aspectj-autoproxy>

    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--<property name="prefix">-->
    <!--<value>/WEB-INF/pages/</value>-->
    <!--</property>-->
    <!--<property name="suf fix">-->
    <!--<value>.html</value>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<import resource="classpath*:/hsf-provider.xml" />-->
    <!--<import resource="classpath*:/mysql.xml"/>-->
    <!--<import resource="classpath*:/logback.xml"/>-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 定义数据源Bean，使用C3P0数据源实现 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
    <!--destroy-method="close">-->
    <!--<property name="user" value="${jdbc.user}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
    <!--<property name="driverClass" value="${jdbc.driverClass}"/>-->
    <!--<property name="initialPoolSize" value="10"/>-->
    <!--<property name="maxIdleTime" value="100"/>-->
    <!--<property name="maxPoolSize" value="200"/>-->
    <!--<property name="minPoolSize" value="10"/>-->
    <!--<property name="loginTimeout" value="1000"/>-->
    <!--</bean>-->
    <!--多数据源-->
    <bean id="dynamicDataSource" class="com.learn.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="fromDataSource" value-ref="fromDataSource"/>
                <entry key="toDataSource" value-ref="toDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="fromDataSource"/>
    </bean>
    <bean id="fromDataSource" parent="parentDataSource">
        <property name="jdbcUrl">
            <value>${jdbc.from.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.from.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.from.password}</value>
        </property>
    </bean>
    <bean id="toDataSource" parent="parentDataSource">
        <property name="jdbcUrl">
            <value>${jdbc.to.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.to.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.to.password}</value>
        </property>
    </bean>
    <bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass">
            <value>${jdbc.driverClass}</value><!-- jdbc连接相关信息，单独编写一个properties文件 -->
        </property>

        <!-- 一次性获取连接数，Default:3  -->
        <property name="acquireIncrement" value="5"/>

        <!-- 初始化连接数，Default:3 -->
        <property name="initialPoolSize" value="3"/>

        <property name="minPoolSize" value="1"/>
        <!-- 连接池中保留的最大连接数，Default:15 -->
        <property name="maxPoolSize" value="20"/>

        <!-- 获取连接失败后，重复尝试的次数，Default:30 -->
        <property name="acquireRetryAttempts" value="30"/>

        <!-- 获取连接超时时间，超时后将抛出SQLException，Default:0，单位：毫秒 -->
        <property name="checkoutTimeout" value="1000"/>

        <!-- 多长时间检查所有连接池中的空闲连接，Default:0，单位：秒 -->
        <property name="idleConnectionTestPeriod" value="1200"/>

        <!-- 最大空闲时间内连接未使用，则被丢弃，Default:0，单位：秒 -->
        <property name="maxIdleTime" value="1800"/>

        <!-- 取得连接的同时是否校验连接的有效性，Default:false -->
        <property name="testConnectionOnCheckin" value="true"/>
    </bean>
    <!--从这往上是多数据源新加的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--dataSource属性指定要用到的连接池 -->
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="com.learn.zhiye"/>
    </bean>

</beans>

